{% assign loyaltyProgram = customer.metafields.amika_loyalty_program.points.value['points'] %}
{% assign brandBoxPoints = customer.metafields.amika_loyalty_program.points.value['brandBoxPoints'] %}
{% assign tier = customer.metafields.amika_loyalty_program.points.value['tier'] %}
{% assign tiersProducts = shop.metafields.amika_loyalty_program.tiers %}

<script>
    window.addEventListener("DOMContentLoaded", () => {

        const BrandBoxEls = document.querySelectorAll('[data-brandbox-icon]');
        const user = JSON.parse('{{ customer.metafields.amika_loyalty_program.points }}');
        const tiersProducts = JSON.parse('{{ tiersProducts }}');

        function updateBrandBoxItem(condition) {
            if (condition) {
                console.log('added brandbox', element)
                BrandBoxEls.forEach(element => element.classList.add('is'));
            } else {
                BrandBoxEls.forEach(element => element.classList.remove('is'));
            }
        }

        function showMsg() {
            if (BrandBoxEls) {
                BrandBoxEls.forEach(el => {
                    el.addEventListener('click', function () {
                        console.log('user.tier', user.tier);
                        el.classList.toggle('open');
                        if (user.tier === "-1") {
                            console.log('user.tier > -1');
                            el.querySelector('.ac-brandpoints__text').textContent = 'youâ€™re eligible for brand choice rewards through your primary distributor!';
                        }
                        setTimeout(function () {
                            el.classList.remove('open');
                        }, 10000); // 10 sec
                    });
                });
            }
        }

        function getCart() {
            return fetch('/cart.js')
                .then(response => response.json())
                .then(data => {
                    const cartItems = data.items;
                    const productsInCartFilter = cartItems.map(item => {
                        return {
                            product_id: item.product_id,
                            variant_id: item.variant_id
                        };
                    });
                    return productsInCartFilter;
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        if (user.brandBoxPoints > 0 && user.tier !== '-1') {
            updateBrandBoxItem(true);
        }
        showMsg();

        getCart().then(productsInCartFilter => {
            function updateCartNew(updates) {
                if (Object.keys(updates).length !== 0) {
                    jQuery.post(`${window.Shopify.routes.root}cart/update.js`, {
                        updates: updates
                    });
                }
            }

            function checkCartTiers(cart, tiers) {
                const variant = cart.reduce((acc, item) => {
                    if (tiers.some(tier => tier.variant_id === item.variant_id)) {
                        acc.push(item.variant_id);
                    }
                    return acc;
                }, []);

                return variant;
            }

            const {tier, brandBoxPoints} = user;
            const tiersInCart = checkCartTiers(productsInCartFilter, tiersProducts);

            function cartTiersAreEqual(array1, array2) {
                if (array1.length === 0) {
                    return false;
                }
                return array1.every((element, index) => element === array2[index]);
            }

            function checkArraysEquality(array1, array2) {
                return cartTiersAreEqual(array1, array2);
            }

            if (user.tier === "-1" || brandBoxPoints < 1) {

                const removeTiersVariantId = checkCartTiers(productsInCartFilter, tiersProducts)

                if (removeTiersVariantId > 0) {
                    const updates = {
                        [removeTiersVariantId]: 0
                    }
                    updateCartNew(updates);
                    setTimeout(() => {
                        updateCartDesc(); // update sidebarCart
                    }, 500);
                } else {
                    console.log('No product tiers to remove')
                }

            } else {
                const selectedProduct = tiersProducts.find(product => product.id == tier);
                const userTiers = [selectedProduct.variant_id];
                const checkTierIdEquality = checkArraysEquality(tiersInCart, userTiers);
                const emptyTearsInCart = tiersInCart.length === 0;

                if (!checkTierIdEquality) {
                    const userTierVariantId = selectedProduct.variant_id;
                    const cartUpdates = {}
                    if (selectedProduct && emptyTearsInCart) {
                        cartUpdates[userTierVariantId] = 1;
                    } else {
                        cartUpdates[userTierVariantId] = 1;
                        cartUpdates[tiersInCart] = 0;
                    }
                    console.log('cartUpdates', cartUpdates)
                    updateCartNew(cartUpdates);
                    updateBrandBoxItem(true);
                    setTimeout(() => {
                        updateCartDesc() // update sidebarCart
                    }, 1000);
                } else {
                    console.log('product tiers are the same');
                }
            }
        });
    });
</script>